// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`stylelintVSCode() should be resolved with diagnostics when it lints CSS successfully 1`] = `
Array [
  Object {
    "code": Object {
      "target": "https://stylelint.io/user-guide/rules/string-quotes",
      "value": "string-quotes",
    },
    "message": "Expected single quotes (string-quotes)",
    "range": Object {
      "end": Object {
        "character": 7,
        "line": 0,
      },
      "start": Object {
        "character": 7,
        "line": 0,
      },
    },
    "severity": 2,
    "source": "stylelint",
  },
  Object {
    "code": Object {
      "target": "https://stylelint.io/user-guide/rules/indentation",
      "value": "indentation",
    },
    "message": "Expected indentation of 0 tabs (indentation)",
    "range": Object {
      "end": Object {
        "character": 2,
        "line": 0,
      },
      "start": Object {
        "character": 2,
        "line": 0,
      },
    },
    "severity": 1,
    "source": "stylelint",
  },
]
`;

exports[`stylelintVSCode() should be resolved with diagnostics when the rules include unknown rules 1`] = `
Array [
  Object {
    "code": "this-rule-does-not-exist",
    "message": "Unknown rule this-rule-does-not-exist.",
    "range": Object {
      "end": Object {
        "character": 0,
        "line": 0,
      },
      "start": Object {
        "character": 0,
        "line": 0,
      },
    },
    "severity": 1,
    "source": "stylelint",
  },
  Object {
    "code": "this-rule-also-does-not-exist",
    "message": "Unknown rule this-rule-also-does-not-exist.",
    "range": Object {
      "end": Object {
        "character": 0,
        "line": 0,
      },
      "start": Object {
        "character": 0,
        "line": 0,
      },
    },
    "severity": 1,
    "source": "stylelint",
  },
]
`;

exports[`stylelintVSCode() should be resolved with one diagnostic when the CSS is broken 1`] = `
Array [
  Object {
    "code": "CssSyntaxError",
    "message": "Unclosed block (CssSyntaxError)",
    "range": Object {
      "end": Object {
        "character": 10,
        "line": 5,
      },
      "start": Object {
        "character": 10,
        "line": 5,
      },
    },
    "severity": 1,
    "source": "stylelint",
  },
]
`;

exports[`stylelintVSCode() should check CSS syntax even if no configuration is provided 1`] = `
Array [
  Object {
    "code": "CssSyntaxError",
    "message": "Unclosed bracket (CssSyntaxError)",
    "range": Object {
      "end": Object {
        "character": 19,
        "line": 0,
      },
      "start": Object {
        "character": 19,
        "line": 0,
      },
    },
    "severity": 1,
    "source": "stylelint",
  },
]
`;

exports[`stylelintVSCode() should check CSS syntax even if no rule is provided 1`] = `
Array [
  Object {
    "code": "CssSyntaxError",
    "message": "At-rule without name (CssSyntaxError)",
    "range": Object {
      "end": Object {
        "character": 7,
        "line": 0,
      },
      "start": Object {
        "character": 7,
        "line": 0,
      },
    },
    "severity": 1,
    "source": "stylelint",
  },
]
`;

exports[`stylelintVSCode() should reject with a reason when it takes incorrect options 1`] = `
"Invalid option name \\"bar\\" for rule \\"at-rule-empty-line-before\\"
Invalid option value \\"foo\\" for rule \\"color-hex-case\\""
`;

exports[`stylelintVSCode() should support \`processors\` option 1`] = `
Array [
  Object {
    "code": "CssSyntaxError",
    "message": "Unclosed string (CssSyntaxError)",
    "range": Object {
      "end": Object {
        "character": 9,
        "line": 0,
      },
      "start": Object {
        "character": 9,
        "line": 0,
      },
    },
    "severity": 1,
    "source": "stylelint",
  },
]
`;

exports[`stylelintVSCode() should support CSS-in-JS 1`] = `
Array [
  Object {
    "code": Object {
      "target": "https://stylelint.io/user-guide/rules/font-weight-notation",
      "value": "font-weight-notation",
    },
    "message": "Expected numeric font-weight notation (font-weight-notation)",
    "range": Object {
      "end": Object {
        "character": 29,
        "line": 2,
      },
      "start": Object {
        "character": 29,
        "line": 2,
      },
    },
    "severity": 1,
    "source": "stylelint",
  },
  Object {
    "code": Object {
      "target": "https://stylelint.io/user-guide/rules/font-weight-notation",
      "value": "font-weight-notation",
    },
    "message": "Expected numeric font-weight notation (font-weight-notation)",
    "range": Object {
      "end": Object {
        "character": 6,
        "line": 4,
      },
      "start": Object {
        "character": 6,
        "line": 4,
      },
    },
    "severity": 1,
    "source": "stylelint",
  },
]
`;

exports[`stylelintVSCode() with a configuration file should adhere to configuration file settings 1`] = `
Array [
  Object {
    "code": Object {
      "target": "https://stylelint.io/user-guide/rules/length-zero-no-unit",
      "value": "length-zero-no-unit",
    },
    "message": "Unexpected unit (length-zero-no-unit)",
    "range": Object {
      "end": Object {
        "character": 10,
        "line": 3,
      },
      "start": Object {
        "character": 10,
        "line": 3,
      },
    },
    "severity": 1,
    "source": "stylelint",
  },
]
`;

exports[`stylelintVSCode() with autofix autofix should work if there are errors that cannot be autofixed 1`] = `
Object {
  "diagnostics": Array [
    Object {
      "code": Object {
        "target": "https://stylelint.io/user-guide/rules/selector-type-no-unknown",
        "value": "selector-type-no-unknown",
      },
      "message": "Unexpected unknown type selector \\"unknown\\" (selector-type-no-unknown)",
      "range": Object {
        "end": Object {
          "character": 0,
          "line": 1,
        },
        "start": Object {
          "character": 0,
          "line": 1,
        },
      },
      "severity": 1,
      "source": "stylelint",
    },
  ],
  "output": "
unknown {
  width: 100%;
  height: 100%;
}
",
}
`;

exports[`stylelintVSCode() with autofix autofix should work if there is syntax errors in css 1`] = `
"
.a {
	width: 100%;
	height: 100%
}
"
`;

exports[`stylelintVSCode() with autofix autofix should work properly if configs are defined 1`] = `
"a
{
  color:red;
}"
`;

exports[`stylelintVSCode() with customSyntax autofix should work properly if customSyntax is defined 1`] = `
Object {
  "diagnostics": Array [],
  "output": "a
  color:red",
}
`;

exports[`stylelintVSCode() with customSyntax should work properly if customSyntax is defined 1`] = `
Object {
  "diagnostics": Array [
    Object {
      "code": Object {
        "target": "https://stylelint.io/user-guide/rules/indentation",
        "value": "indentation",
      },
      "message": "Expected indentation of 2 spaces (indentation)",
      "range": Object {
        "end": Object {
          "character": 3,
          "line": 1,
        },
        "start": Object {
          "character": 3,
          "line": 1,
        },
      },
      "severity": 1,
      "source": "stylelint",
    },
  ],
}
`;

exports[`stylelintVSCode() with reportInvalidScopeDisables should work properly if reportInvalidScopeDisables is true 1`] = `
Object {
  "diagnostics": Array [
    Object {
      "code": "foo",
      "message": "unused rule: foo, start line: 3, end line: 3",
      "range": Object {
        "end": Object {
          "character": 0,
          "line": 2,
        },
        "start": Object {
          "character": 0,
          "line": 2,
        },
      },
      "severity": 2,
      "source": "stylelint",
    },
    Object {
      "code": "foo",
      "message": "unused rule: foo, start line: 4, end line: 4",
      "range": Object {
        "end": Object {
          "character": 32,
          "line": 3,
        },
        "start": Object {
          "character": 0,
          "line": 3,
        },
      },
      "severity": 2,
      "source": "stylelint",
    },
    Object {
      "code": "foo",
      "message": "unused rule: foo, start line: 6, end line: 7",
      "range": Object {
        "end": Object {
          "character": 26,
          "line": 6,
        },
        "start": Object {
          "character": 0,
          "line": 5,
        },
      },
      "severity": 2,
      "source": "stylelint",
    },
  ],
  "invalidScopeDisables": Array [
    Object {
      "diagnostic": Object {
        "code": "foo",
        "message": "unused rule: foo, start line: 3, end line: 3",
        "range": Object {
          "end": Object {
            "character": 0,
            "line": 2,
          },
          "start": Object {
            "character": 0,
            "line": 2,
          },
        },
        "severity": 2,
        "source": "stylelint",
      },
      "range": Object {
        "end": 3,
        "rule": "foo",
        "start": 3,
        "unusedRule": "foo",
      },
    },
    Object {
      "diagnostic": Object {
        "code": "foo",
        "message": "unused rule: foo, start line: 4, end line: 4",
        "range": Object {
          "end": Object {
            "character": 32,
            "line": 3,
          },
          "start": Object {
            "character": 0,
            "line": 3,
          },
        },
        "severity": 2,
        "source": "stylelint",
      },
      "range": Object {
        "end": 4,
        "rule": "foo",
        "start": 4,
        "unusedRule": "foo",
      },
    },
    Object {
      "diagnostic": Object {
        "code": "foo",
        "message": "unused rule: foo, start line: 6, end line: 7",
        "range": Object {
          "end": Object {
            "character": 26,
            "line": 6,
          },
          "start": Object {
            "character": 0,
            "line": 5,
          },
        },
        "severity": 2,
        "source": "stylelint",
      },
      "range": Object {
        "end": 7,
        "rule": "foo",
        "start": 6,
        "unusedRule": "foo",
      },
    },
  ],
}
`;

exports[`stylelintVSCode() with reportNeedlessDisables should work properly if reportNeedlessDisables is true 1`] = `
Object {
  "diagnostics": Array [
    Object {
      "code": "indentation",
      "message": "unused rule: indentation, start line: 4, end line: 4",
      "range": Object {
        "end": Object {
          "character": 15,
          "line": 3,
        },
        "start": Object {
          "character": 0,
          "line": 3,
        },
      },
      "severity": 2,
      "source": "stylelint",
    },
    Object {
      "code": "indentation",
      "message": "unused rule: indentation, start line: 7, end line: 11",
      "range": Object {
        "end": Object {
          "character": 34,
          "line": 10,
        },
        "start": Object {
          "character": 0,
          "line": 6,
        },
      },
      "severity": 2,
      "source": "stylelint",
    },
    Object {
      "code": "indentation",
      "message": "unused rule: indentation, start line: 14, end line: 14",
      "range": Object {
        "end": Object {
          "character": 56,
          "line": 13,
        },
        "start": Object {
          "character": 0,
          "line": 13,
        },
      },
      "severity": 2,
      "source": "stylelint",
    },
    Object {
      "code": "indentation",
      "message": "unused rule: indentation, start line: 17",
      "range": Object {
        "end": Object {
          "character": 0,
          "line": 20,
        },
        "start": Object {
          "character": 0,
          "line": 16,
        },
      },
      "severity": 2,
      "source": "stylelint",
    },
    Object {
      "code": Object {
        "target": "https://stylelint.io/user-guide/rules/indentation",
        "value": "indentation",
      },
      "message": "Expected indentation of 4 spaces (indentation)",
      "range": Object {
        "end": Object {
          "character": 2,
          "line": 2,
        },
        "start": Object {
          "character": 2,
          "line": 2,
        },
      },
      "severity": 1,
      "source": "stylelint",
    },
  ],
  "needlessDisables": Array [
    Object {
      "diagnostic": Object {
        "code": "indentation",
        "message": "unused rule: indentation, start line: 4, end line: 4",
        "range": Object {
          "end": Object {
            "character": 15,
            "line": 3,
          },
          "start": Object {
            "character": 0,
            "line": 3,
          },
        },
        "severity": 2,
        "source": "stylelint",
      },
      "range": Object {
        "end": 4,
        "rule": "indentation",
        "start": 4,
        "unusedRule": "indentation",
      },
    },
    Object {
      "diagnostic": Object {
        "code": "indentation",
        "message": "unused rule: indentation, start line: 7, end line: 11",
        "range": Object {
          "end": Object {
            "character": 34,
            "line": 10,
          },
          "start": Object {
            "character": 0,
            "line": 6,
          },
        },
        "severity": 2,
        "source": "stylelint",
      },
      "range": Object {
        "end": 11,
        "rule": "indentation",
        "start": 7,
        "unusedRule": "indentation",
      },
    },
    Object {
      "diagnostic": Object {
        "code": "indentation",
        "message": "unused rule: indentation, start line: 14, end line: 14",
        "range": Object {
          "end": Object {
            "character": 56,
            "line": 13,
          },
          "start": Object {
            "character": 0,
            "line": 13,
          },
        },
        "severity": 2,
        "source": "stylelint",
      },
      "range": Object {
        "end": 14,
        "rule": "indentation",
        "start": 14,
        "unusedRule": "indentation",
      },
    },
    Object {
      "diagnostic": Object {
        "code": "indentation",
        "message": "unused rule: indentation, start line: 17",
        "range": Object {
          "end": Object {
            "character": 0,
            "line": 20,
          },
          "start": Object {
            "character": 0,
            "line": 16,
          },
        },
        "severity": 2,
        "source": "stylelint",
      },
      "range": Object {
        "end": undefined,
        "rule": "indentation",
        "start": 17,
        "unusedRule": "indentation",
      },
    },
  ],
}
`;

exports[`stylelintVSCode() with stylelintPath should work properly if custom path is defined in stylelintPath 1`] = `
Object {
  "diagnostics": Array [
    Object {
      "code": "fake",
      "message": "Fake result",
      "range": Object {
        "end": Object {
          "character": 0,
          "line": 0,
        },
        "start": Object {
          "character": 0,
          "line": 0,
        },
      },
      "severity": 1,
      "source": "stylelint",
    },
  ],
}
`;

exports[`stylelintVSCode() with stylelintPath should work properly if stylelintPath is defined 1`] = `
Object {
  "diagnostics": Array [
    Object {
      "code": Object {
        "target": "https://stylelint.io/user-guide/rules/indentation",
        "value": "indentation",
      },
      "message": "Expected indentation of 2 spaces (indentation)",
      "range": Object {
        "end": Object {
          "character": 3,
          "line": 1,
        },
        "start": Object {
          "character": 3,
          "line": 1,
        },
      },
      "severity": 1,
      "source": "stylelint",
    },
  ],
}
`;
