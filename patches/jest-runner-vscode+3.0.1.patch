diff --git a/node_modules/jest-runner-vscode/dist/run-vscode.js b/node_modules/jest-runner-vscode/dist/run-vscode.js
index 5d8e513..2d97e27 100644
--- a/node_modules/jest-runner-vscode/dist/run-vscode.js
+++ b/node_modules/jest-runner-vscode/dist/run-vscode.js
@@ -32,8 +32,10 @@ async function runVSCode({ vscodePath, args, jestArgs, env, tests, globalConfig,
             testsByPath.set(test.path, test);
         }
         const completedTests = new Set();
+        console.dir({ tests, testsByPath }, { depth: 2 });
         const onTestFileResult = async ({ test, testResult, }) => {
             const matchingTest = testsByPath.get(test.path);
+            console.dir({ path: test.path, matchingTest }, { depth: 2 });
             if (!matchingTest) {
                 return;
             }
@@ -83,6 +85,7 @@ async function runVSCode({ vscodePath, args, jestArgs, env, tests, globalConfig,
         ipc.server.on('stderr', onStderr);
         ipc.server.on('error', onError);
         const vscode = child_process_1.default.spawn(vscodePath, args, { env: environment });
+        console.dir({ vscodePath, args, environment, vscode }, { depth: 2 });
         if (!silent && !filterOutput) {
             vscode.stdout.pipe(process.stdout);
             vscode.stderr.pipe(process.stderr);
@@ -114,8 +117,9 @@ async function runVSCode({ vscodePath, args, jestArgs, env, tests, globalConfig,
                 for (const test of tests) {
                     const completed = completedTests.has(test);
                     if (!completed) {
+                        const util = require('node:util');
                         await onFailure(test, (childError ??
-                            new Error(`No test result returned for ${test.path}`)));
+                            new Error(`(debug) No test result returned for ${test.path} in ${util.inspect(tests)}`)));
                     }
                 }
             }
diff --git a/node_modules/jest-runner-vscode/dist/runner.js b/node_modules/jest-runner-vscode/dist/runner.js
index e24c976..d4a2fcb 100644
--- a/node_modules/jest-runner-vscode/dist/runner.js
+++ b/node_modules/jest-runner-vscode/dist/runner.js
@@ -50,8 +50,10 @@ class VSCodeTestRunner {
         //   /project/__tests__/needs_dir2/test.js  --> runs in a separate process
         // Group tests by directory.
         const testsByDir = new Map();
+        console.dir({ tests }, { depth: 2 });
         for (const test of tests) {
             const dir = path_1.default.dirname(test.path);
+            console.dir({ dir }, { depth: 2 });
             const existingTests = testsByDir.get(dir);
             if (existingTests) {
                 existingTests.push(test);
@@ -60,6 +62,7 @@ class VSCodeTestRunner {
                 testsByDir.set(dir, [test]);
             }
         }
+        console.dir({ testsByDir }, { depth: 2 });
         // Start IPC server.
         const { DEBUG_VSCODE_IPC } = process_1.default.env;
         const ipc = new node_ipc_1.IPC();
@@ -76,6 +79,7 @@ class VSCodeTestRunner {
                 throw Object.assign(new Error(), { name: 'CancelRun' });
             }
             try {
+                console.dir({ testDir, baseVSCodeOptions }, { depth: 2 });
                 const vscodeOptions = {
                     ...baseVSCodeOptions,
                     ...((await (0, cosmiconfig_1.cosmiconfig)('jest-runner-vscode').search(testDir))
@@ -83,6 +87,7 @@ class VSCodeTestRunner {
                 };
                 const vscodePath = vscodeOptions.vscodeExecutablePath ??
                     (await (0, download_vscode_1.default)(vscodeOptions.version, vscodeOptions.platform, vscodeOptions.quiet || this._globalConfig.silent, this._globalConfig.json || this._globalConfig.useStderr));
+                console.dir({ vscodeOptions, vscodePath }, { depth: 2 });
                 const args = [
                     '-n',
                     '--no-sandbox',
@@ -110,6 +115,7 @@ class VSCodeTestRunner {
                 });
             }
             catch (error) {
+                console.dir({ error }, { depth: null });
                 for (const test of testGroup) {
                     await onFailure(test, error);
                 }
