diff --git a/node_modules/jest-runner-vscode/dist/run-vscode.js b/node_modules/jest-runner-vscode/dist/run-vscode.js
index 5d8e513..e7ee69d 100644
--- a/node_modules/jest-runner-vscode/dist/run-vscode.js
+++ b/node_modules/jest-runner-vscode/dist/run-vscode.js
@@ -114,8 +114,9 @@ async function runVSCode({ vscodePath, args, jestArgs, env, tests, globalConfig,
                 for (const test of tests) {
                     const completed = completedTests.has(test);
                     if (!completed) {
+                        const util = require('node:util');
                         await onFailure(test, (childError ??
-                            new Error(`No test result returned for ${test.path}`)));
+                            new Error(`(debug) No test result returned for ${test.path} in ${util.inspect(tests)}`)));
                     }
                 }
             }
diff --git a/node_modules/jest-runner-vscode/dist/runner.js b/node_modules/jest-runner-vscode/dist/runner.js
index e24c976..dd6a7e8 100644
--- a/node_modules/jest-runner-vscode/dist/runner.js
+++ b/node_modules/jest-runner-vscode/dist/runner.js
@@ -81,8 +81,11 @@ class VSCodeTestRunner {
                     ...((await (0, cosmiconfig_1.cosmiconfig)('jest-runner-vscode').search(testDir))
                         ?.config ?? {}),
                 };
+                console.dir({ testDir, baseVSCodeOptions, vscodeOptions }, { depth: 2 });
                 const vscodePath = vscodeOptions.vscodeExecutablePath ??
                     (await (0, download_vscode_1.default)(vscodeOptions.version, vscodeOptions.platform, vscodeOptions.quiet || this._globalConfig.silent, this._globalConfig.json || this._globalConfig.useStderr));
+                console.dir({ vscodePath }, { depth: 2 });
+                console.dir(`Start running VSCode: '${vscodePath}'`);
                 const args = [
                     '-n',
                     '--no-sandbox',
@@ -110,6 +113,7 @@ class VSCodeTestRunner {
                 });
             }
             catch (error) {
+                if (true) throw error;
                 for (const test of testGroup) {
                     await onFailure(test, error);
                 }
